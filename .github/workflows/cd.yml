name: App build
on:
  push:
    branches:
      - main

jobs:
  bump_version:
    name: Bump version
    runs-on: macos-latest
    permissions:
      contents: write
    outputs:
      commit_hash: ${{ steps.update_commit.outputs.commit_hash }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Bump version
        run: |
          xcrun agvtool bump

      - name: Commit version bump
        uses: stefanzweifel/git-auto-commit-action@v5
        id: update_commit
        with:
          commit_message: "Bump version"
    
  build_with_signing:
    name: Build, sign and upload app
    needs:
      - bump_version
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump_version.outputs.commit_hash || github.sha }}

      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Sentry CLI
        uses: matbour/setup-sentry-cli@v1
        with:
          token: ${{ secrets.SENTRY_AUTH_TOKEN }} # from GitHub secrets
          organization: ${{ secrets.SENTRY_ORG }}
          project: lotta-ios

      - name: Install the Apple certificate and provisioning profile
        env:
          SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          MOBILE_PROVISIONING_PROFILE: ${{ secrets.MOBILE_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$SIGNING_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$MOBILE_PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$SIGNING_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          PP_UUID=$(cat $PP_PATH | grep -A 1 -a UUID | grep "string" | sed -E "s/.*>([^<]*)<.*/\1/g")
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PP_UUID.mobileprovision

          # Setup export options plist
          IDENTITY_NAME=$(security find-identity -v -p codesigning | grep "iPhone Distribution" | head -n 1 | cut -d'"' -f2)
          TEAM_ID=$(echo -n $IDENTITY_NAME | cut -d'(' -f2 | cut -d')' -f1)

          cat <<- EOF > ~/export-options.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>$TEAM_ID</string>
            <key>uploadBitcode</key>
            <true/>
            <key>compileBitcode</key>
            <true/>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>$IDENTITY_NAME</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>net.einsa.lotta</key>
              <string>$PP_UUID</string>
            </dict>
          </dict>
          </plist>
          EOF
      - name: Build app
        run: |
          xcodebuild -scheme "lotta" clean archive -archivePath "archive" -configuration "Release"
          xcodebuild -exportArchive \
            -archivePath "$GITHUB_WORKSPACE/archive.xcarchive" \
            -exportOptionsPlist ~/export-options.plist \
            -exportPath $RUNNER_TEMP/export

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lotta.ipa
          path: ${{ runner.temp }}/export
          if-no-files-found: 'error'

      - name: Upload build
        env:
          API_KEY: ${{ secrets.APPSTORECONNECT_APIKEY }}
          KEY_ID: ${{ secrets.APPSTORECONNECT_KEYID }}
          KEY_ISSUER: ${{ secrets.APPSTORECONNECT_KEY_ISSUER }}
        run: |
          ls -lsa $RUNNER_TEMP/export
          mkdir -p ~/private_keys
          echo -n $API_KEY | base64 --decode --output ~/private_keys/AuthKey_$KEY_ID.p8
          IPA_FILE=$(ls $RUNNER_TEMP/export/*.ipa)
          xcrun altool --validate-app -f $IPA_FILE -t ios --apiKey $KEY_ID --apiIssuer $KEY_ISSUER
          xcrun altool --upload-app -f $IPA_FILE -t ios --apiKey $KEY_ID --apiIssuer $KEY_ISSUER
